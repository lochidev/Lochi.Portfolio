# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
pool:
  vmImage: 'windows-latest'
variables:
  solution: 'Lochi.Portfolio/Server/Lochi.Portfolio.Server.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
stages:
- stage: Prepare
  jobs:
   - job: Prepare
     steps:
     - task: NodeTool@0
       inputs:
        versionSpec: '>=16.3.0'
        checkLatest: true
     - task: UseDotNet@2
       displayName: 'Install .NET Core SDK'
       inputs:
        version: 6.0.x
        performMultiLevelLookup: true
        includePreviewVersions: true # Required for preview versions
     - task: DotNetCoreCLI@2
       inputs:
        command: 'publish'
        arguments: '-c $(buildConfiguration) -o $(Build.SourcesDirectory)\Lochi.Portfolio\Server\bin\Release\net6.0\publish'
        projects: '$(solution)'

     - task: PowerShell@2
       displayName: 'Inline Powershell'
       inputs:
        TargetType: inline
        Script: |
         Compress-Archive -Path "$(Build.SourcesDirectory)\Lochi.Portfolio\Server\bin\Release\net6.0\publish" -DestinationPath "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
        pwsh: true
     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
       artifact: drop
- stage: Deploy
  jobs:
   - deployment: VMDeploy
     displayName: web
     environment:
      name: vm
      resourceType: VirtualMachine
      tags: lochi.destroyer
      resourceName: lochi
     strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                cd $(Pipeline.Workspace)/drop
                ls -r
                unzip -o $(Build.BuildId).zip -d portfolio
                rm $(Build.BuildId).zip
                cd portfolio
                ls
                cd publish
                ls
                rm Client.zip
                unzip -o Server.zip -d Server
                cd Server
                ls
                BOT_PROCESS=$(bash $HOME/get_process.sh [d]otnet Lochi.Portfolio.Server.dll)
                kill -9 $BOT_PROCESS
                printf "Killed bot with pId $BOT_PROCESS\n"
                echo $(nohup dotnet Lochi.Portfolio.Server.dll urls=http://localhost:6001 >/dev/null 2>&1 &)
                           
                
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on success

