# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
pool:
  vmImage: 'windows-latest'
variables:
  solution: 'Lochi.Portfolio/Server/Lochi.Portfolio.Server.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
jobs:
 - job: Prepare
   steps:
   - task: NodeTool@0
     inputs:
      versionSpec: '>=16.3.0'
      checkLatest: true
   - task: UseDotNet@2
     displayName: 'Install .NET Core SDK'
     inputs:
      version: 6.0.x
      performMultiLevelLookup: true
      includePreviewVersions: true # Required for preview versions
   - task: DotNetCoreCLI@2
     inputs:
      command: 'publish'
      arguments: '-c $(buildConfiguration)'
      projects: '$(solution)'

   - task: PowerShell@2
     displayName: 'Inline Powershell'
     inputs:
      TargetType: inline
      Script: |
        Compress-Archive -Path "$(Build.SourcesDirectory)/Lochi.Portfolio/Server/bin/Release/net6.0/publish" -DestinationPath "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      pwsh: true
   - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
     artifact: drop

 - deployment: VMDeploy
   displayName: web
   environment:
    name: vm
    resourceType: VirtualMachine
    tags: lochi.destroyer
    resourceName: lochi
   strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                #sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
                cd $(Pipeline.Workspace)
                ls -r
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on success

